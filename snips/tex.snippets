global !p
def math():
	return vim.eval('vimtex#syntax#in_mathzone()') == '1'

def comment():
	return vim.eval('vimtex#syntax#in_comment()') == '1'

def env(name):
	[x,y] = vim.eval("vimtex#env#is_inside('" + name + "')")
	return x != '0' and y != '0'

endglobal

snippet master "master" bA
\documentclass[12pt]{report}
\input{../../preamble.tex}

\begin{document}
	\begin{titlepage}
		\begin{center}
			\textbf{Qadis Chaudhry} \\\
			\vspace{0.2cm}
			Rutgers University, ECE Major \\\
			\vfill
			\textbf{Lecture Notes} \\\
			\vfill
			${3:Course Name and Code} \\\
			\vspace{0.2cm}
			${4:Semester}
		\end{center}
	\end{titlepage}
	\input{$0}
	\clearpage
\end{document}
endsnippet

snippet pre "preamble" bA
\documentclass[12pt]{report}
\input{../../preamble.tex}

\begin{document}
	$0
\end{document}
endsnippet

snippet template1 "Template1" bA
\documentclass[12pt]{report}
\input{../../preamble.tex}

\title{$1}
\author{Qadis Chaudhry}
\date{$2}
\begin{document}
\maketitle
	$0
\end{document}
endsnippet

snippet template2 "Template2" bA
\documentclass[12pt]{report}
\input{../../preamble.tex}

\begin{document}
	\tpage{${1:Title}}{${2:Due Date}}{${3:Course Name and Code}}{${4:Semester}}
	$0
\end{document}
endsnippet

snippet template3 "Template3" bA
\documentclass[12pt]{report}
\input{../../preamble.tex}
\fancyhead[R]{$1}

\begin{document}
	$0
\end{document}
endsnippet

snippet tpage "title page" bA
	\tpage{${1:Title}}{${2:Due Date}}{${3:Course Name and Code}}{${4:Semester}}
endsnippet

snippet lec "lecture" bA
\lecture{${1:Number}}{${2:Date}}{${3:Title}}$0
endsnippet

snippet hw "homework" bA
\hw{${1:Number}}
endsnippet

snippet beg "begin{} / end{}" bA
\\begin{$1}
	$0
\\end{$1}
endsnippet

priority 100
snippet ... "ldots" iA
\ldots
endsnippet

snippet par "paragraph" bA
\par $0
endsnippet

snippet vv "verbatim" iA
\verb~$1~$0
endsnippet

snippet VV "verbatim" bA
\begin{Verbatim}
	$0
\end{Verbatim}
endsnippet

snippet sec "section*" bA
\section*{$1}$0
endsnippet

snippet ssec "subsection*" bA
\subsection*{$1}$0
endsnippet

snippet sssec "subsubsection*" bA
\subsubsection*{$1}$0
endsnippet

snippet +- "plus-minus" iA
\pm
endsnippet

snippet << "much less than" iA
\ll
endsnippet

snippet >> "much greater than" iA
\gg
endsnippet

context "math()"
snippet box "boxed" iA
\boxed{${1:${VISUAL:}}}$0
endsnippet

context "math()"
snippet "([\d+])deg" "degrees" riA
`!p snip.rv=match.group(1)`^{\circ}
endsnippet

snippet center "center" bA
\begin{center}
	$0
\end{center}
endsnippet

snippet table "Table environment" b
\begin{table}[${1:htpb}]
	\vspace{-0mm}
	\centering
	\begin{tabular}{${5:c}}
		\toprule
		$0${5/((?<=.)c|l|r)|./(?1: & )/g} \\\
		\bottomrule
	\end{tabular}
	\vspace{-0mm}
\end{table}
endsnippet

snippet fig "Figure environment" b
\begin{figure}[${1:htpb}]
	\centering
	${2:\includegraphics[width=0.8\textwidth]{./$3}}
	\caption{${4:$3}}
	\label{fig:${5:${3/\W+/-/g}}}
\end{figure}
endsnippet

snippet hfig "Horizontal figure" b
\begin{figure}[${1:htpb}]
	\begin{minipage}{.5\textwidth}
		\centering
		\includegraphics[width=0.8\textwidth]{./$2}
	\end{minipage}
	\begin{minipage}{.5\textwidth}
		\centering
		\includegraphics[width=0.8\textwidth]{./$3}
	\end{minipage}
	\caption{$4}
\end{figure}
endsnippet

snippet vfig "Vertical figure" b
\begin{center}
	\objects
		{\includegraphics[width=0.8\textwidth]{./$1}}
		{\includegraphics[width=0.8\textwidth]{./$2}}
\end{center}
endsnippet

snippet enum "Enumerate" bA
\begin{enumerate}
	\item $0
\end{enumerate}
endsnippet

snippet item "Itemize" bA
\begin{itemize}
	\item[$1] $0
\end{itemize}
endsnippet

snippet pac "Package" b
\usepackage[${1:options}]{${2:package}}$0
endsnippet

context "math()"
snippet imp "implies" Ai
\implies
endsnippet

snippet => "implies" Ai
\implies
endsnippet

snippet =< "implied by" Ai
\impliedby
endsnippet

snippet lm "Line Math" wA
$ ${1} $`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
	snip.rv = ' '
else:
	snip.rv = ''
`$2
endsnippet

snippet dm "Display Math" wA
\[
	${1:${VISUAL}}
\]
endsnippet

snippet proof "Proof" bA
\begin{proof}
	${1:${VISUAL}}
\end{proof}
endsnippet

snippet ali "Align" bA
\begin{align*}
	${1:${VISUAL}}
\end{align*}
endsnippet

snippet gath "Gather" bA
\begin{gather*}
	${1:${VISUAL}}
\end{gather*}
endsnippet

context "math()"
snippet // "Fraction" iA
\\frac{$1}{$2}$0
endsnippet

snippet / "Fraction" i
\\frac{${VISUAL}}{$1}$0
endsnippet

context "math()"
snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "symbol frac" wrA
\\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet

priority 1000
context "math()"
snippet '^.*\)/' "() frac" wrA
`!p
stripped = match.string[:-1]
depth = 0
i = len(stripped) - 1
while True:
	if stripped[i] == ')': depth += 1
	if stripped[i] == '(': depth -= 1
	if depth == 0: break;
	i-=1
snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
`{$1}$0
endsnippet

context "math()"
snippet '([A-Za-z])(\d)' "auto subscript" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

context "math()"
snippet '([A-Za-z])_(\d\d)' "auto subscript2" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet


snippet sympy "sympyblock " w
sympy $1 sympy$0
endsnippet

priority 10000
snippet 'sympy(.*)sympy' "sympy" wr
`!p
from sympy import *
x, y, z, t = symbols('x y z t')
k, m, n = symbols('k m n', integer=True)
f, g, h = symbols('f g h', cls=Function)
init_printing()
snip.rv = eval('latex(' + match.group(1).replace('\\', '').replace('^', '**').replace('{', '(').replace('}', ')') + ')')
`
endsnippet

priority 1000
snippet math "mathematicablock" w
math $1 math$0
endsnippet

priority 10000
snippet 'math(.*)math' "math" wr
`!p
import subprocess
code = match.group(1)
code = 'ToString[' + code + ', TeXForm]'
snip.rv = subprocess.check_output(['wolframscript', '-code', code])
`
endsnippet

context "math()"
snippet == "equals" iA
&= $1
endsnippet

context "math()"
snippet neq "equals" iA
\neq
endsnippet

context "math()"
snippet ceil "ceil" iA
\left\lceil $1 \right\rceil $0
endsnippet

context "math()"
snippet floor "floor" iA
\left\lfloor $1 \right\rfloor$0
endsnippet

context "math()"
snippet "(p|b|v)mat" "matrices" riA
\begin{`!p snip.rv=match.group(1)`matrix} $1 \end{`!p snip.rv=match.group(1)`matrix} $0
endsnippet

context "math()"
snippet () "left( right)" iA
\left( ${1:${VISUAL}} \right) $0
endsnippet

context "math()"
snippet lr "left( right)" i
\left( ${1:${VISUAL}} \right) $0
endsnippet

context "math()"
snippet lr( "left( right)" i
\left( ${1:${VISUAL}} \right) $0
endsnippet

context "math()"
snippet lr| "left| right|" i
\left| ${1:${VISUAL}} \right| $0
endsnippet

context "math()"
snippet lr{ "left\{ right\}" i
\left\\{ ${1:${VISUAL}} \right\\} $0
endsnippet

context "math()"
snippet lrb "left\{ right\}" i
\left\\{ ${1:${VISUAL}} \right\\} $0
endsnippet

context "math()"
snippet lr[ "left[ right]" i
\left[ ${1:${VISUAL}} \right] $0
endsnippet

context "math()"
snippet lra "leftangle rightangle" iA
\left<${1:${VISUAL}} \right>$0
endsnippet

context "math()"
snippet sum "sum" w
\sum_{${1:n}=${2:1}}^{${3:\infty}} $0
endsnippet

context "math()"
snippet lim "limit" w
\lim_{${1:n} \to ${2:\infty}} $0
endsnippet

context "math()"
snippet prod "product" w
\prod_{${1:n=${2:1}}}^{${3:\infty}} ${4:${VISUAL}} $0
endsnippet

context "math()"
snippet del "d/dx" wA
\frac{\partial $1}{\partial ${2:x}} $0
endsnippet

context "math()"
snippet sr "\sqrt{}" iA
\sqrt{${1:${VISUAL}}}$0
endsnippet

context "math()"
snippet sq "^2" iA
^2
endsnippet

context "math()"
snippet cb "^3" iA
^3
endsnippet

context "math()"
snippet td "to the ... power" iA
^{${1:${VISUAL:}}}
endsnippet

context "math()"
snippet inv "inverse" iA
^{-1}
endsnippet

context "math()"
snippet __ "subscript" iA
_{${1:${VISUAL:}}}
endsnippet

# context "math()"
# snippet "([a-zA-Z])nn" "subscript n" riA
# `!p snip.rv=match.group(1)`_{${1:n}}
# endsnippet

context "math()"
snippet <= "leq" iA
\le
endsnippet

context "math()"
snippet >= "geq" iA
\ge
endsnippet

context "math()"
snippet -> "to" iA
\to
endsnippet

context "math()"
snippet mcal "mathcal" iA
\mathcal{$1}$0
endsnippet

context "math()"
snippet nbl "nabla" iA
\nabla
endsnippet

context "math()"
snippet curl "curl" iA
\nabla \times $0
endsnippet

context "math()"
snippet div "divergence" iA
\nabla \cdot $0
endsnippet

context "math()"
snippet xx "cross" iA
\times
endsnippet

priority 100
snippet ** "cdot" iA
\cdot
endsnippet

context "math()"
snippet norm "norm" iA
\|$1\|$0
endsnippet

context "math()"
snippet "(sin|cos|tan)" "trig" riA
\\`!p snip.rv=match.group(1)`$0
endsnippet

context "math()"
snippet "(ln|log)" "logarithms" riA
\\`!p snip.rv=match.group(1)` $0
endsnippet

priority 300
context "math()"
snippet dint "integral" wA
\int_{${1:-\infty}}^{${2:\infty}} ${3:${VISUAL}}\, $0
endsnippet

context "math()"
snippet eval "evaluate" wA
\Big|_{$1}^{$2} $0
endsnippet

context "math()"
snippet ";(a|A)" "alpha" riA
\\`!p snip.rv=match.group(1)`lpha$0
endsnippet

context "math()"
snippet ";(b|B)" "beta" riA
\\`!p snip.rv=match.group(1)`eta$0
endsnippet

context "math()"
snippet ";(g|G)" "gamma" riA
\\`!p snip.rv=match.group(1)`amma$0
endsnippet

context "math()"
snippet ";(d|D)" "delta" riA
\\`!p snip.rv=match.group(1)`elta$0
endsnippet

context "math()"
snippet ";(t|T)" "theta" riA
\\`!p snip.rv=match.group(1)`heta$0
endsnippet

context "math()"
snippet ";(s|S)" "sigma" riA
\\`!p snip.rv=match.group(1)`igma$0
endsnippet

context "math()"
snippet ";(o|O)" "omega" riA
\\`!p snip.rv=match.group(1)`mega$0
endsnippet

context "math()"
snippet ";(l|L)" "lambda" riA
\\`!p snip.rv=match.group(1)`ambda$0
endsnippet

context "math()"
snippet "(pi|phi|tau|eta|mu)" "letters" riA
\\`!p snip.rv=match.group(1)`$0
endsnippet

priority 200
context "math()"
snippet int "int" iA
\int
endsnippet

context "math()"
snippet ~~ "~" iA
\sim
endsnippet

context "math()"
snippet || "mid" iA
\mid
endsnippet

context "math()"
snippet notin "not in " iA
\not\in
endsnippet

context "math()"
snippet inn "in" iA
\in
endsnippet

context "math()"
snippet ooo "infinity" iA
\infty
endsnippet

context "math()"
snippet uuu "bigcup" iA
\bigcup_{${1:i \in ${2: I}}} $0
endsnippet

context "math()"
snippet nnn "bigcap" iA
\bigcap_{${1:i \in ${2: I}}} $0
endsnippet

context "math()"
snippet tt "text" iA
\text{${1:${VISUAL:}}}$0
endsnippet

snippet tb "text bold" i
\textbf{${1:${VISUAL:}}}$0
endsnippet

context "math()"
snippet case "cases" wA
\begin{cases}
	$1
\end{cases}
endsnippet

context "math()"
snippet bar "bar" wA
\overline{${1:${VISUAL:}}}
endsnippet

context "math()"
snippet "([a-zA-Z])bar" "bar" riA
\overline{`!p snip.rv=match.group(1)`}
endsnippet

context "math()"
snippet hat "hat" wA
\hat{${1:${VISUAL:}}}
endsnippet

context "math()"
snippet "([a-zA-Z])hat" "hat" riA
\hat{`!p snip.rv=match.group(1)`}
endsnippet

context "math()"
snippet vec "vec" wA
\vec{${1:${VISUAL:}}}
endsnippet

context "math()"
snippet "(\\?\w+)(,\.|\.,)" "Vector postfix" riA
\vec{`!p snip.rv=match.group(1)`}
endsnippet

context "math()"
snippet pr "phasor" wA
\tilde{${1:${VISUAL:}}}
endsnippet

# vim:ft=snippets
